drop table writes;
drop table holds;
drop table borrowInfo;
drop table handles;
drop table review;
drop table borrows;

drop table books;
drop table authors;
drop table bookReviews;
drop table booksBorrowed;
drop table staff;
drop table bookHolder;

drop view newBooks;
drop view newAuthors;
drop view fines;

CREATE TABLE books(
    bookID INT PRIMARY KEY,
    genre varchar2(25) NOT NULL,
    publicationYr varchar2(4) NOT NULL,
    condition varchar2(25) NOT NULL,
    available char NOT NULL,
    title varchar2(25) NOT NULL
);
DESC books;

INSERT INTO books(bookID,genre,publicationYr,condition,available,title) VALUES
(1,'action',2000,'well used','Y','book');
INSERT INTO books(bookID,genre,publicationYr,condition,available,title) VALUES
(2,'action',2002,'used','Y','bookey');
INSERT INTO books(bookID,genre,publicationYr,condition,available,title) VALUES
(3,'comedy',1999,'old','N','bookin');
INSERT INTO books(bookID,genre,publicationYr,condition,available,title) VALUES
(4,'romance',2011,'new','N','bookley');
INSERT INTO books(bookID,genre,publicationYr,condition,available,title) VALUES
(5,'action',2019,'used','Y','booksey');
INSERT INTO books(bookID,genre,publicationYr,condition,available,title) VALUES
(6,'comedy',2004,'new','Y','bok');
INSERT INTO books(bookID,genre,publicationYr,condition,available,title) VALUES
(7,'horror',2002,'old','N','boook');

CREATE TABLE authors (
    authorID INT PRIMARY KEY,
    dob DATE NOT NULL,
    nationality varchar2(25) NOT NULL,
    age INT NOT NULL CHECK(age > 0),
    firstN varchar2(25) NOT NULL,
    lastN varchar2(25) NOT NULL
);
DESC authors;

INSERT INTO authors(authorID, dob, nationality, age, firstN, lastN)
VALUES (1, TO_DATE('1990-02-22', 'YYYY-MM-DD'), 'Australian', 33, 'Harold', 'Aussie');
INSERT INTO authors(authorID, dob, nationality, age, firstN, lastN)
VALUES (2, TO_DATE('1985-07-15', 'YYYY-MM-DD'), 'American', 38, 'Emily', 'Smith');
INSERT INTO authors(authorID, dob, nationality, age, firstN, lastN)
VALUES (3, TO_DATE('1978-11-10', 'YYYY-MM-DD'), 'British', 45, 'William', 'Jones');
INSERT INTO authors(authorID, dob, nationality, age, firstN, lastN)
VALUES (4, TO_DATE('1995-04-03', 'YYYY-MM-DD'), 'Canadian', 28, 'Sophia', 'Chen');
INSERT INTO authors(authorID, dob, nationality, age, firstN, lastN)
VALUES (5, TO_DATE('1980-09-12', 'YYYY-MM-DD'), 'Irish', 43, 'Liam', 'Murphy');

CREATE TABLE writes (
    authorID INT REFERENCES authors(authorID),
    bookID INT REFERENCES books(bookID),
    
    PRIMARY KEY(bookID,authorID)
);
DESC writes;

INSERT INTO writes (authorID, bookID)
VALUES (1, 1);
INSERT INTO writes (authorID, bookID)
VALUES (1, 2);
INSERT INTO writes (authorID, bookID)
VALUES (2, 3);
INSERT INTO writes (authorID, bookID)
VALUES (2, 4);
INSERT INTO writes (authorID, bookID)
VALUES (3, 5);


CREATE TABLE bookReviews (
    reviewID INT PRIMARY KEY,
    reviewDate DATE NOT NULL,
    rating INT NOT NULL CHECK(rating BETWEEN 1 AND 10)
);
DESC bookReviews;

INSERT INTO bookReviews(reviewID, reviewDate, rating)
VALUES (1, TO_DATE('2021-04-12', 'YYYY-MM-DD'), 9);
INSERT INTO bookReviews(reviewID, reviewDate, rating)
VALUES (2, TO_DATE('2021-07-05', 'YYYY-MM-DD'), 8);
INSERT INTO bookReviews(reviewID, reviewDate, rating)
VALUES (3, TO_DATE('2021-09-22', 'YYYY-MM-DD'), 7);
INSERT INTO bookReviews(reviewID, reviewDate, rating)
VALUES (4, TO_DATE('2021-12-15', 'YYYY-MM-DD'), 6);
INSERT INTO bookReviews(reviewID, reviewDate, rating)
VALUES (5, TO_DATE('2022-02-03', 'YYYY-MM-DD'), 9);

CREATE TABLE holds (
    reviewID INT REFERENCES bookReviews(reviewID),
    bookID INT REFERENCES books(bookID),
    PRIMARY KEY(bookID,reviewID)
);
DESC holds;

INSERT INTO holds(reviewID, bookID)
VALUES (1, 1);
INSERT INTO holds(reviewID, bookID)
VALUES (2, 1);
INSERT INTO holds(reviewID, bookID)
VALUES (3, 1);
INSERT INTO holds(reviewID, bookID)
VALUES (4, 2);
INSERT INTO holds(reviewID, bookID)
VALUES (5, 3);


CREATE TABLE booksBorrowed (
    loanID INT PRIMARY KEY,
    borrowDate DATE NOT NULL,
    returnDate DATE NOT NULL,
    lateFee NUMBER NOT NULL CHECK (lateFee >= 0),
    fineStat CHAR NOT NULL
);
DESC booksBorrowed;

INSERT INTO booksBorrowed(loanID, borrowDate, returnDate, lateFee, fineStat)
VALUES (1, TO_DATE('2022-09-11', 'YYYY-MM-DD'), TO_DATE('2023-09-01', 'YYYY-MM-DD'), 90.00, 'Y');
INSERT INTO booksBorrowed(loanID, borrowDate, returnDate, lateFee, fineStat)
VALUES (2, TO_DATE('2022-07-05', 'YYYY-MM-DD'), TO_DATE('2022-07-07', 'YYYY-MM-DD'), 25.50, 'N');
INSERT INTO booksBorrowed(loanID, borrowDate, returnDate, lateFee, fineStat)
VALUES (3, TO_DATE('2022-12-03', 'YYYY-MM-DD'), TO_DATE('2022-12-04', 'YYYY-MM-DD'), 12.75, 'N');
INSERT INTO booksBorrowed(loanID, borrowDate, returnDate, lateFee, fineStat)
VALUES (4, TO_DATE('2022-04-08', 'YYYY-MM-DD'), TO_DATE('2022-04-09', 'YYYY-MM-DD'), 20.00, 'N');
INSERT INTO booksBorrowed(loanID, borrowDate, returnDate, lateFee, fineStat)
VALUES (5, TO_DATE('2022-11-01', 'YYYY-MM-DD'), TO_DATE('2022-11-03', 'YYYY-MM-DD'), 45.00, 'Y');

CREATE TABLE borrowInfo(
    loanID INT REFERENCES booksBorrowed(loanID),
    bookID INT REFERENCES books(bookID),
    PRIMARY KEY(bookID,loanID)
);
DESC borrowInfo;



CREATE TABLE staff(
    staffID INT PRIMARY KEY,
    firstN varchar2(25) NOT NULL,
    lastN varchar2(25) NOT NULL,
    email varchar2(25) NOT NULL,
    phone varchar2(12) NOT NULL,
    jobTitle varchar2(25) NOT NULL,
    employmentDate DATE NOT NULL, 
    salary NUMBER NOT NULL CHECK(salary > 10000),
    workFreq varchar2(25) NOT NULL
);
DESC staff;

INSERT INTO staff(staffID, firstN, lastN, email, phone, jobTitle, employmentDate, salary, workFreq)
VALUES (1, 'Jimmy', 'Benson', 'JB@gmail.com', '416-551-2341', 'Senior Shelf Operator', TO_DATE('2010-11-29', 'YYYY-MM-DD'), 32000, '30hr/week');
INSERT INTO staff(staffID, firstN, lastN, email, phone, jobTitle, employmentDate, salary, workFreq)
VALUES (2, 'Sarah', 'Johnson', 'sj@gmail.com', '415-777-9988', 'Assistant Librarian', TO_DATE('2015-06-15', 'YYYY-MM-DD'), 42000, '40hr/week');
INSERT INTO staff(staffID, firstN, lastN, email, phone, jobTitle, employmentDate, salary, workFreq)
VALUES (3, 'Michael', 'Smith', 'ms@gmail.com', '512-333-7890', 'Library Clerk', TO_DATE('2019-09-03', 'YYYY-MM-DD'), 30000, '35hr/week');
INSERT INTO staff(staffID, firstN, lastN, email, phone, jobTitle, employmentDate, salary, workFreq)
VALUES (4, 'Emily', 'Davis', 'ed@gmail.com', '713-555-1234', 'Cataloging Specialist', TO_DATE('2020-02-22', 'YYYY-MM-DD'), 38000, '38hr/week');
INSERT INTO staff(staffID, firstN, lastN, email, phone, jobTitle, employmentDate, salary, workFreq)
VALUES (5, 'Daniel', 'Brown', 'db@gmail.com', '415-888-5678', 'Library Technician', TO_DATE('2018-11-17', 'YYYY-MM-DD'), 35000, '37hr/week');

CREATE TABLE handles (
    staffID INT REFERENCES staff(staffID),
    bookID INT REFERENCES books(bookID),
    PRIMARY KEY(bookID,staffID)
);
DESC handles;



CREATE TABLE bookHolder (
    holderID INT PRIMARY KEY,
    email varchar2(25) NOT NULL,
    phone varchar2(12) NOT NULL,
    membershipStart DATE NOT NULL,
    membershipExpire DATE NOT NULL,
    firstN varchar2(25) NOT NULL,
    address varchar2(25) NOT NULL,
    memberStatus char NOT NULL
);
DESC bookHolder;

INSERT INTO bookHolder(holderID, email, phone, membershipStart, membershipExpire, firstN, address, memberStatus)
VALUES (1, 'hadan.books@hotmail.com', '647-982-3573', TO_DATE('2015-04-20', 'YYYY-MM-DD'), TO_DATE('2025-04-20', 'YYYY-MM-DD'), 'Hadan', '152 Bookboy Ave', 'A');
INSERT INTO bookHolder(holderID, email, phone, membershipStart, membershipExpire, firstN, address, memberStatus)
VALUES (2, 'jane.smith@gmail.com', '416-555-7890', TO_DATE('2018-08-12', 'YYYY-MM-DD'), TO_DATE('2023-08-12', 'YYYY-MM-DD'), 'Jane', '789 Library Lane', 'A');
INSERT INTO bookHolder(holderID, email, phone, membershipStart, membershipExpire, firstN, address, memberStatus)
VALUES (3, 'mark.johnson@yahoo.com', '512-987-6543', TO_DATE('2020-03-05', 'YYYY-MM-DD'), TO_DATE('2024-03-05', 'YYYY-MM-DD'), 'Mark', '456 Bookshelf St', 'A');
INSERT INTO bookHolder(holderID, email, phone, membershipStart, membershipExpire, firstN, address, memberStatus)
VALUES (4, 'lisa.wilson@gmail.com', '713-333-2222', TO_DATE('2019-11-30', 'YYYY-MM-DD'), TO_DATE('2022-11-30', 'YYYY-MM-DD'), 'Lisa', '123 Reading Rd', 'I');
INSERT INTO bookHolder(holderID, email, phone, membershipStart, membershipExpire, firstN, address, memberStatus)
VALUES (5, 'sam.jones@hotmail.com', '415-777-1111', TO_DATE('2021-06-18', 'YYYY-MM-DD'), TO_DATE('2026-06-18', 'YYYY-MM-DD'), 'Sam', '567 Bookworm Blvd', 'A');

CREATE TABLE review (
    reviewID INT REFERENCES bookReviews(reviewID),
    holderID INT REFERENCES bookHolder(holderID),
    PRIMARY KEY(holderID,reviewID)
);
DESC review;

INSERT INTO review (reviewID, holderID)
VALUES (1, 1);
INSERT INTO review (reviewID, holderID)
VALUES (2, 2);
INSERT INTO review (reviewID, holderID)
VALUES (3, 3);
INSERT INTO review (reviewID, holderID)
VALUES (4, 3);
INSERT INTO review (reviewID, holderID)
VALUES (5, 4);


CREATE TABLE borrows (
    holderID INT REFERENCES bookHolder(holderID),
    loanID INT REFERENCES booksBorrowed(loanID),
    PRIMARY KEY(holderID,loanID)
);
DESC borrows;

INSERT INTO borrows (holderID, loanID)
VALUES (1, 1);
INSERT INTO borrows (holderID, loanID)
VALUES (2, 2);
INSERT INTO borrows (holderID, loanID)
VALUES (3, 3);
INSERT INTO borrows (holderID, loanID)
VALUES (3, 4);
INSERT INTO borrows (holderID, loanID)
VALUES (4, 5);




INSERT INTO borrowInfo(loanID, bookID)
VALUES (1, 1);
INSERT INTO borrowInfo(loanID, bookID)
VALUES (2, 1);
INSERT INTO borrowInfo(loanID, bookID)
VALUES (3, 1);
INSERT INTO borrowInfo(loanID, bookID)
VALUES (4, 2);
INSERT INTO borrowInfo(loanID, bookID)
VALUES (5, 3);

SELECT * FROM books;
SELECT * FROM authors;
SELECT * FROM bookReviews;
SELECT * FROM booksBorrowed;
SELECT * FROM staff;
SELECT * FROM bookHolder;

SELECT * FROM writes;
SELECT * FROM holds;
SELECT * FROM review;
SELECT * FROM borrows;
SELECT * FROM borrowInfo;

--Query 1
SELECT DISTINCT genre
FROM books
ORDER BY genre;

--Query 2
SELECT DISTINCT title
FROM books
WHERE publicationYr >= '2000'
ORDER BY title;

--Query 3
SELECT condition, COUNT(*) as num_books
FROM books
GROUP BY condition;

--Query 4
SELECT firstN, lastN
FROM authors
ORDER BY lastN ASC;

--Query 5
SELECT *
FROM bookreviews
WHERE rating >= 8
ORDER BY rating DESC;

--Query 6
SELECT *
FROM booksBorrowed
WHERE lateFee >= 50
ORDER BY lateFee DESC;

--QUERY 7
SELECT *
FROM staff
WHERE salary > 35000
ORDER BY salary DESC;

--Advanced Query 1
--Gets the name of the person that wrote the review, the name of the book and the rating they gave
SELECT bh.firstN, b.title, br.reviewD, br.rating
FROM bookHolder bh
INNER JOIN review r ON bh.holderID = r.holderID
INNER JOIN bookReviews br ON r.reviewID = br.reviewID
INNER JOIN holds h ON br.reviewID = h.reviewID
INNER JOIN books b ON h.bookID = b.bookID;
    

--Advanced Query 2
-- gets the author name,the book they wrote and the genre
SELECT a.firstN, a.lastN, b.title, b.genre
FROM authors a
INNER JOIN writes w ON a.authorID = w.authorID
INNER JOIN books b ON w.bookID = b.bookID;


--Advanced Query 3  
-- retrieves information about books borrowed by library members, including the book title, borrower's name, and the borrow and return dates.
SELECT bh.firstN , b.title, bb.borrowD, bb.returnD
FROM bookHolder bh
INNER JOIN borrows bo ON bh.holderID = bo.holderID
INNER JOIN booksBorrowed bb ON bo.loanID = bb.loanID
INNER JOIN borrowInfo bi ON bb.loanID = bi.loanID
INNER JOIN books b ON bi.bookID = b.bookID;


--Views 
--view of all books published after the year 2000
CREATE VIEW newBooks AS 
SELECT title, genre, publicationYr
FROM books
WHERE publicationYr > 2000;

--view of authors under the age of 30 (up and coming authros)
CREATE VIEW newAuthor AS 
SELECT firstN, lastN, age
FROM authors
WHERE age < 30;


--view of loans with a fine
CREATE VIEW fines AS 
SELECT loanID, fineStat
FROM booksBorrowed
WHERE fineStat = 'Y';

--view of current active members
CREATE VIEW activeHolders AS 
SELECT firstN, memberStatus
FROM bookHolder
WHERE memberStatus = 'A';


--List the bookholders who have reviewed books or borrowed books.
SELECT bh.firstN
FROM bookHolder bh
WHERE EXISTS (
    SELECT 1
    FROM review r
    WHERE r.holderID = bh.holderID
)
UNION
SELECT bh.firstN 
FROM bookHolder bh
WHERE EXISTS (
    SELECT 1
    FROM borrows bo
    WHERE bo.holderID = bh.holderID
);

--List the book titles with their respective authors for books with a rating of 9 or higher.
SELECT b.title, a.firstN, a.lastN
FROM books b
INNER JOIN writes w ON b.bookID = w.bookID
INNER JOIN authors a ON w.authorID = a.authorID
WHERE EXISTS (
    SELECT *
    FROM holds h
    JOIN bookReviews br ON h.reviewID = br.reviewID
    WHERE h.bookID = b.bookID
    AND br.rating >= 9
);

-- List for each book, the number of times it has been borrowed.
SELECT b.title, COUNT(bi.loanID) AS BorrowCount
FROM books b
LEFT JOIN borrowInfo bi ON b.bookID = bi.bookID
GROUP BY b.title;

-- List books that are available for borrowing but have never been reviewed.
SELECT b.title
FROM books b
WHERE b.available = 'Y'
MINUS
SELECT DISTINCT b.title
FROM books b
INNER JOIN holds h ON b.bookID = h.bookID
INNER JOIN bookReviews br ON h.reviewID = br.reviewID;

-- List book genres with an average rating above 7 for books in that genre.
SELECT b.genre, AVG(br.rating) AS avg_rating
FROM books b
INNER JOIN holds h ON b.bookID = h.bookID
INNER JOIN bookReviews br ON h.reviewID = br.reviewID
GROUP BY b.genre
HAVING AVG(br.rating) > 7;